# -*- coding: utf-8 -*-
"""Mobil-Price-Classification-SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XsFiqmmgwh6P1dGUfqsoqXRcdqip4BEh
"""

# Commented out IPython magic to ensure Python compatibility.
# Library Import
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import seaborn as sns
sns.set_style("darkgrid")
import pandas_profiling as ProfileReport
import plotly.graph_objs as go
import plotly.express as px
import cufflinks as cf

import warnings
warnings.filterwarnings("ignore")

from plotly.offline import download_plotlyjs, init_notebook_mode, plot, iplot
init_notebook_mode(connected = True)
cf.go_offline();

# Base Model
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import RobustScaler
from sklearn.preprocessing import label_binarize

from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import VotingClassifier
from sklearn.ensemble import GradientBoostingClassifier

from sklearn.svm import SVC
from sklearn.svm import LinearSVC

from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import SGDClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA

from sklearn.model_selection import train_test_split
from sklearn.model_selection import StratifiedKFold
from sklearn.model_selection import GridSearchCV

from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import roc_auc_score
from sklearn.metrics import auc
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import accuracy_score
from sklearn.metrics import mean_squared_error
from sklearn.metrics import f1_score
from sklearn.metrics import roc_curve
from sklearn.multiclass import OneVsRestClassifier

from lightgbm import LGBMClassifier

"""## Load Data"""

train = pd.read_csv('/content/train.csv')
test = pd.read_csv('/content/test.csv')

print('Train Shape:', train.shape)
print('*'*25)
print('Test Shape:', test.shape)

df = train.copy()

df.head()

df.shape

df.info()

import missingno as msno
msno.bar(df)
plt.show()

"""**We haven't any missing value :)**"""

# pip install https://github.com/pandas-profiling/pandas-profiling/archive/master.zip

df.profile_report()

"""# Data Analysis"""

desc = df.describe().T
df1 = pd.DataFrame(index=['battery_power', 'blue', 'clock_speed', 'dual_sim',
                          'fc', 'four_g', 'int_memory', 'm_dep', 'mobile_wt', 
                          'n_cores', 'pc', 'px_height', 'px_width', 'ram', 
                          'sc_h', 'sc_w', 'talk_time', 'three_g','touch_screen',
                          'wifi', 'price_range'], 
                   columns= ["count","mean","std","min",
                             "25%","50%","75%","max"], data= desc )

f,ax = plt.subplots(figsize=(12,12))

sns.heatmap(df1, annot=True,cmap = "Blues", fmt= '.0f',
            ax=ax,linewidths = 5, cbar = False,
            annot_kws={"size": 16})

plt.xticks(size = 18)
plt.yticks(size = 12, rotation = 0)
plt.ylabel("Variables")
plt.title("Descriptive Statistics", size = 16)
plt.show()

# Correlations

corr=df.corr()
fig = plt.figure(figsize=(15,12))
r = sns.heatmap(corr, cmap='Purples')
r.set_title('Correlations')

# price range correlations

corr.sort_values(by=['price_range'],ascending=False).iloc[0].sort_values(ascending=False)

#Ram vs Price Range
sns.pointplot(y='ram',x='price_range',data=df);

#Battery Power vs Price Range
sns.pointplot(y='battery_power',x='price_range',data=df);

sns.boxplot(x='price_range', y='battery_power',data=df)

#Int Memory vs Price Range
sns.pointplot(y='int_memory',x='price_range',data=df);

"""## X and Y"""

X = df.drop('price_range',axis=1)
y = df['price_range']

"""## Splitting of Test and Train Data"""

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.33,random_state=42)

"""# Creating and Training Model

## 1) Linear Regression
"""

lrm = LinearRegression()
lrm.fit(X_train,y_train)
lrm.score(X_test,y_test)

"""## 2) KNN"""

knnm = KNeighborsClassifier(n_neighbors=10)
knnm.fit(X_train,y_train)
knnm.score(X_test,y_test)
print(classification_report(y_test,y_knn_pred))

"""## 3) Logistic Regression"""

logm = LogisticRegression()
logm.fit(X_train,y_train)
logm.score(X_test,y_test)

"""## 4) Decision Tree"""

dtc = DecisionTreeClassifier()
dtc.fit(X_train,y_train)
dtc.score(X_test,y_test)

"""## 5) Random Forest Classifier"""

rf = RandomForestClassifier()
rf.fit(X_train,y_train)
rf.score(X_test,y_test)

"""## 6) LGBM Classifier"""

lgbmc = LGBMClassifier(random_state = 42)
lgbmc.fit(X_train,y_train)
lgbmc.score(X_test,y_test)

"""## 7) SVM Classifier"""

svmcm = SVC()
svmcm.fit(X_train,y_train)
svmcm.score(X_test,y_test)
y_svmcm_pred = svmcm.predict(X_test)
print(classification_report(y_test,y_svmcm_pred))
plt.plot(y_test,y_svmcm_pred)

plt.scatter(y_test,y_svmcm_pred)

val=confusion_matrix(y_test,y_svmcm_pred)
print(val)

plt.figure(figsize = (10,7))
sns.heatmap(val,annot=True)

"""## Classification of test.csv"""

df_test = pd.read_csv('test.csv')
df_test.head()

# df_test.drop('id',axis=1,inplace=True)
df_test.head()

# pred_svmcm = svmcm.predict(df_test)
# pred_svmcm

df_test['price_range'] = pred_svmcm

df_test

X = df_test.drop('price_range',axis=1)
y = df_test['price_range']

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.33,random_state=42)

svmcm_t = SVC()
svmcm_t.fit(X_train,y_train)
svmcm_t.score(X_test,y_test)

y_svmcm_t_pred = svmcm_t.predict(X_test)
print(classification_report(y_test,y_svmcm_t_pred))
plt.plot(y_test,y_svmcm_t_pred)
plt.scatter(y_test,y_svmcm_t_pred)

df_test['price_range'].to_csv('submission.csv')

